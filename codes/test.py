# -*- coding: utf-8 -*-


# from algorithm import *
# from .dataSetting import *


def noramlized(data):
    """
    数据归一化处理
    Args:
        data (_type_): 原始数据，不包含标签

    Returns:
        _type_: 归一化后的数据
    """
    """归一化后的数据"""
    new_data = data

    """归一化"""
    new_data = (data - data.min()) / (data.max() - data.min())

    return new_data


def deal_other_synthesis():
    """
    特别处理下其他数据集，如 S2
    """
    raw_data = pandas.read_csv("./dataset/data/synthesis/S2.csv")
    col_list = list(raw_data.columns)
    label = {"label": normalized_label(list(raw_data[col_list[-1]]))}
    data = noramlized(raw_data[col_list[0:-1]]).round(3).join(pandas.DataFrame(label))
    data.columns = list(range(len(data.columns) - 1)) + ["label"]
    data.to_csv("./dataset/data/synthesis/S2.csv", index=False)


def deal_other_uci():
    """
    特别处理下其他数据集，如 txt，data 格式，主要是将其列标签放到最后一列，其他的不动
    """
    file = "abalone"
    dir_path = "./dataset/raw/uci/" + file + "/" + file + ".csv"
    raw_data = pandas.read_csv(dir_path)
    col_list = list(raw_data.columns)
    label = {"label": normalized_label(list(raw_data[col_list[-1]]))}
    data = noramlized(raw_data[col_list[0:-1]]).round(3).join(pandas.DataFrame(label))
    data.columns = list(range(len(data.columns) - 1)) + ["label"]
    print(data)
    # data.to_csv(dir_path, index=False)


def test_normalized_label():
    """ """
    label = [1, 2, 2, 1, 1, 2, 3, 2, 1, 2, 3, 2]
    print(normalized_label(label))
    print(label)


def test_dataset(data_type):
    """
    统计数据集信息
    Args:
        data_type (_type_): _description_
    """
    configure = {}
    path = "./dataset/experiment/" + data_type + "/"
    for data_dir in os.listdir(path):
        configure[data_dir] = {}
        p = path + data_dir + "/"
        file = os.listdir(p)[0]
        data = pandas.read_csv(p + file)
        cols = data.columns
        configure[data_dir]["path"] = p + file
        configure[data_dir]["save_path"] = "./result/" + data_type + "/"
        configure[data_dir]["samples_num"] = len(data)
        configure[data_dir]["features_num"] = len(cols) - 1
        configure[data_dir]["num"] = len(set(data[cols[-1]]))

    print(configure)


import pandas
from multiprocessing.pool import *


# class A:
#     """"""

#     def __init__(self) -> None:
#         """"""

#     def m(self, id):
#         """

#         Args:
#             id (_type_): _description_
#         """
#         print(id)
#         pandas.DataFrame({"A": [1, 2, 3, 0, id]}).to_csv(str(id) + ".csv")

#     def a(self):
#         """ """
#         p = Pool()
#         p.apply_async(self.m, args=(1))
#         p.apply_async(self.m, args=(2))
#         p.apply_async(self.m, args=(3))
#         p.apply_async(self.m, args=(4))
#         p.close()
#         p.join()

# s_num=10
# dis_m=[
#     0 for _ in range(int(s_num*(s_num-1)/2))
# ]
# dis_mm=[
#     0 for _ in range(int(s_num*(s_num-1)/2))
# ]
# num=0
# for i in range(s_num):
#     for j in range(i+1,s_num):
#         dis_m[num]=i+j
#         num+=1

# dis_mm=[
#     i+j for i in range(s_num) for j in range(i+1,s_num)
# ]
# print(dis_m)
# print(dis_mm)

latex_code = """& COIL20 &  &  &  &  & Dermatology &  &  &  &  \\
			HC & 0.7042 & 0.8143 & 0.6552 & 0.6771 & - & 0.7650 & 0.8781 & 0.7310 & 0.7850 & - \\
			K-Means & 0.6486 & 0.7802 & 0.6191 & 0.6402 & 20 & 0.7596 & 0.8772 & 0.7271 & 0.7817 & 6 \\
			DBSCAN & - & -0.000 & 0.0000 & 0.2221 & 0.01/2 & 0.5656 & 0.5345 & 0.3271 & 0.5193 & 0.95/5 \\
			OPTICS & - & 0.5817 & 0.1159 & 0.3196 & 0.04/10 & 0.6202 & 0.6058 & 0.3682 & 0.5496 & 0.01/7 \\
			SC & - & 0.0024 & 0.0001 & 0.2193 & 1.0 & 0.7623 & 0.8474 & 0.7110 & 0.7705 & 4.0 \\
			DPC & 0.6986 & 0.8336 & 0.5932 & 0.6372 & 2.2 & 0.7514 & 0.7040 & 0.5850 & 0.6785 & 1.6 \\
			DPC-KNN & 0.2882 & 0.5741 & 0.1914 & 0.3570 & 0.1 & 0.8798 & 0.8377 & 0.7836 & 0.8261 & 2.0 \\
			SNN-DPC & 0.7028 & 0.8828 & 0.5794 & 0.6396 & 13 & 0.8607 & 0.9280 & 0.8689 & 0.9021 & 19 \\
			DPC-TSA & \pmb{0.7542} & \pmb{0.8542} & \pmb{0.6751} & \pmb{0.6935} & 34/31 & \pmb{0.9590} & \pmb{0.9370} & \pmb{0.9310} & \pmb{0.9448} & 19/41 \\
			& Iris &  &  &  &  & Isolet &  &  &  &  \\
			HC & 0.8867 & 0.7810 & 0.7196 & 0.8159 & - & 0.6237 & 0.7602 & 0.5602 & 0.5806 & - \\
			K-Means & 0.8867 & 0.7387 & 0.7163 & 0.8112 & 3 & 0.5955 & 0.7521 & 0.5255 & 0.5541 & 26 \\
			DBSCAN & 0.8600 & 0.6590 & 0.6246 & 0.7522 & 0.13/9 & - & 0.0000 & 0.0000 & 0.1945 & 0.01/10 \\
			OPTICS & 0.7733 & 0.7067 & 0.5789 & 0.7431 & 0.01/13 & - & 0.1770 & 0.0083 & 0.1025 & 0.01/2 \\
			SC & 0.8933 & 0.7880 & 0.7323 & 0.8238 & 3.0 & 0.1878 & 0.0000 & 0.0041 & 0.1861 & 5.0 \\
			DPC & 0.5533 & 0.6483 & 0.4531 & 0.6856 & 0.2 & 0.3468 & 0.6086 & 0.2842 & 0.3790 & 3.9 \\
			DPC-KNN & 0.9667 & 0.8836 & 0.9038 & 0.9355 & 0.8 & 0.4301 & 0.6388 & 0.3601 & 0.4223 & 0.2 \\
			SNN-DPC & \pmb{0.9733} & \pmb{0.9133} & \pmb{0.9222} & \pmb{0.9479} & 15 & 0.5397 & 0.7664 & 0.4695 & 0.5197 & 8 \\
			DPC-TSA & 0.9667 & 0.8836 & 0.9038 & 0.9355 & 14/1 & \pmb{0.6417} & \pmb{0.7700} & \pmb{0.5713} & \pmb{0.5955} & 24/61 \\
			& Jaffe &  &  &  &  & Lung &  &  &  &  \\
			HC & 0.9014 & 0.9002 & 0.8124 & 0.8320 & - & 0.8768 & 0.6913 & 0.6725 & 0.8235 & - \\
			K-Means & 0.9108 & 0.9167 & 0.8375 & 0.8542 & 10 & 0.7438 & 0.6009 & 0.4347 & 0.6613 & 5 \\
			DBSCAN & - & 0.0000 & 0.0000 & 0.3097 & 0.01/7 & - & 0.0000 & 0.0000 & 0.7033 & 0.01/2 \\
			OPTICS & 0.7840 & 0.8491 & 0.6803 & 0.7232 & 0.05/9 & 0.7537 & 0.3465 & 0.3411 & 0.7673 & 0.01/3 \\
			SC & 0.1878 & 0.0407 & 0.0042 & 0.1861 & 5.0 & 0.6897 & 0.0277 & 0.0388 & 0.7054 & 4.0 \\
			DPC & 0.7653 & 0.9004 & 0.7604 & 0.7978 & 2.8 & 0.5616 & 0.2620 & 0.1098 & 0.5066 & 3.1 \\
			DPC-KNN & 0.5211 & 0.6704 & 0.4197 & 0.5305 & 2.0 & 0.6995 & 0.2259 & 0.2121 & 0.7278 & 6.0 \\
			SNN-DPC & 0.9531 & 0.9401 & 0.9033 & 0.9127 & 10 & 0.8424 & 0.6657 & 0.6347 & 0.8511 & 14 \\
			DPC-TSA & \pmb{0.9671} & \pmb{0.9601} & \pmb{0.9331} & \pmb{0.9396} & 29/41 & \pmb{0.9015} & \pmb{0.7250} & \pmb{0.7201} & \pmb{0.8706} & 8/9 \\
			& Parkinsons &  &  &  &  & Seeds &  &  &  &  \\
			HC & 0.5333 & 0.1283 & 0.000 & 0.6097 & - & 0.8714 & 0.6872 & 0.6752 & 0.7852 & - \\
			K-Means & 0.6308 & 0.2318 & 0.0520 & 0.5957 & 2 & 0.8905 & 0.6714 & 0.7049 & 0.8026 & 3 \\
			DBSCAN & 0.7846 & 0.1207 & 0.1250 & 0.7993 & 0.23/5 & 0.8381 & 0.5749 & 0.5843 & 0.7268 & 0.34/43 \\
			OPTICS & 0.8154 & 0.2296 & 0.2482 & 0.8115 & 0.01/10 & 0.6762 & 0.4276 & 0.2796 & 0.5755 & 0.01/23 \\
			SC & 0.7436 & -0.001 & -0.013 & 0.7805 & 3.0 & 0.8857 & 0.6859 & 0.6892 & 0.7928 & 4.5 \\
			DPC & \pmb{0.8205} & \pmb{0.2467} & \pmb{0.2686} & \pmb{0.8140} & 0.5 & 0.9143 & 0.7319 & 0.7664 & 0.8439 & 0.7 \\
			DPC-KNN & \pmb{0.8205} & \pmb{0.2467} & \pmb{0.2686} & \pmb{0.8140} & 2.0 & 0.9048 & 0.7169 & 0.7448 & 0.8297 & 1.0 \\
			SNN-DPC & 0.8103 & 0.1710 & 0.2449 & 0.8015 & 6 & \pmb{0.9190} & \pmb{0.7400} & \pmb{0.7776} & \pmb{0.8513} & 6 \\
			DPC-TSA & \pmb{0.8205} & \pmb{0.2467} & \pmb{0.2686} & \pmb{0.8140} & 9/70 & 0.9143 & 0.7319 & 0.7664 & 0.8439 & 4 \\
          			& Segment &  &  &  &  & Sonar &  &  &  &  \\
			HC & 0.7078 & 0.6362 & 0.5382 & 0.6064 & - & 0.5192 & 0.0000 & 0.0000 & 0.4973 & - \\
			K-Means & 0.6654 & 0.6105 & 0.5041 & 0.5752 & 7 & 0.5529 & 0.0051 & 0.0064 & 0.5023 & 2 \\
			DBSCAN & 0.5324 & 0.4739 & 0.2457 & 0.3929 & 0.25/50 & 0.5769 & 0.0463 & 0.0190 & 0.5871 & 0.99/8 \\
			OPTICS & 0.4468 & 0.5560 & 0.2455 & 0.4639 & 0.05/41 & 0.5048 & 0.1826 & 0.0149 & 0.6818 & 0.01/10 \\
			SC & 0.5143 & 0.6836 & 0.4501 & 0.5943 & 2.5 & 0.5048 & 0.0387 & -0.004 & \pmb{0.6852} & 2.0 \\
			DPC & 0.7407 & 0.7081 & 0.6039 & 0.6640 & 1.3 & 0.5962 & \pmb{0.1633} & 0.0325 & 0.6347 & 0.5 \\
			DPC-KNN & 0.7147 & 0.6981 & 0.5945 & 0.6695 & 3.0 & \pmb{0.6202} & 0.0413 & 0.0532 & 0.5268 & 6.0 \\
			SNN-DPC & 0.7130 & 0.7164 & 0.5958 & 0.6653 & 8 & 0.5865 & 0.0158 & 0.0253 & 0.5301 & 23 \\
			DPC-TSA & \pmb{0.7658} & \pmb{0.7035} & \pmb{0.5852} & \pmb{0.6509} & 19/61 & \pmb{0.6202} & 0.0435 & \pmb{0.0533} & 0.5862 & 4/8 \\
				& Tox-171 &  &  &  &  & WDBC &  &  &  &   \\
			HC & 0.4620 & 0.3581 & 0.2558 & 0.4510 & - & 0.8822 & 0.4562 & 0.5814 & 0.8066 & - \\
			K-Means & 0.4795 & 0.2486 & 0.1840 & 0.3901 & 4 & 0.9279 & 0.6226 & 0.7302 & 0.8770 & 2 \\
			DBSCAN & - & 0.0000 & 0.0000 & 0.4964 & 0.01/4 & 0.8506 & 0.3793 & 0.4872 & 0.7660 & 0.50/57 \\
			OPTICS & - & 0.1876 & 0.0342 & 0.3245 & 0.01/2 & 0.6573 & 0.0919 & 0.0439 & 0.7246 & 0.83/9 \\
			SC & 0.2865 & 0.0276 & 0.0022 & 0.4932 & 3.0 & 0.8664 & 0.5063 & 0.5282 & 0.8046 & 4.5 \\
			DPC & 0.4912 & 0.2050 & 0.1379 & 0.3939 & 0.5 & 0.6204 & 0.0063 & 0.000 & 0.7222 & 1.3 \\
			DPC-KNN & 0.4561 & 0.1987 & 0.1226 & 0.4607 & 4.0 & 0.8822 & 0.5452 & 0.5773 & 0.8216 & 2.0 \\
			SNN-DPC & 0.5146 & 0.3221 & 0.2629 & 0.4799 & 8 & \pmb{0.9455} & \pmb{0.6977} & \pmb{0.7921} & \pmb{0.9050} & 13 \\
			DPC-TSA & \pmb{0.5322} & \pmb{0.3876} & \pmb{0.2901} & \pmb{0.4899} & 9/91 & 0.9420 & 0.6754 & 0.7798 & 0.8988 & 64/51 \\
       			& Wine &  &  &  &  \\
			HC & \pmb{0.9775} & 0.9077 & \pmb{0.9310} & \pmb{0.9543} & - \\
			K-Means & 0.9551 & 0.8514 & 0.8685 & 0.9126 & 3 \\
			DBSCAN & 0.8146 & 0.5858 & 0.5292 & 0.7121 & 0.50/21 \\
			OPTICS & 0.4157 & 0.1200 & 0.0161 & 0.5424 & 0.59/7 \\
			SC & \pmb{0.9775} & \pmb{0.9078} & 0.9309 & 0.9541 & 3.5 \\
			DPC & 0.8820 & 0.7074 & 0.6724 & 0.7835 & 2.0 \\
			DPC-KNN & 0.8933 & 0.7233 & 0.6990 & 0.8006 & 6.0 \\
			SNN-DPC & 0.9663 & 0.8769 & 0.8992 & 0.9330 & 18 \\
			DPC-TSA & 0.9326 & 0.7933 & 0.8025 & 0.8686 & 19/1 \\"""

latex_code_ = """& Aggregation &  &  &  &  & D31 &  &  &  &  \\
			HC & 0.8464 & 0.9074 & 0.8150 & 0.8568 & - & 0.9590 & 0.9493 & 0.9196 & 0.9222 & - \\
			K-Means & 0.8579 & 0.8317 & 0.7257 & 0.7850 & 7 & 0.9303 & 0.9505 & 0.9061 & 0.9093 & 31 \\
			DBSCAN & 0.9860 & 0.9653 & 0.9760 & 0.9812 & 0.1/36 & 0.9026 & 0.9124 & 0.8488 & 0.8539 & 0.04/43 \\
			OPTICS & 0.9784 & 0.9475 & 0.9621 & 0.9704 & 0.01/25 & - & 0.8593 & 0.5475 & 0.5989 & 0.01/32 \\
			SC & 0.8071 & 0.7859 & 0.6686 & 0.7370 & 4.0 & 0.5710 & 0.8450 & 0.5956 & 0.6483 & 3.5 \\
			DPC & \pmb{0.9975} & \pmb{0.9923} & \pmb{0.9956} & \pmb{0.9966} & 3.5 & 0.9684 & 0.9555 & 0.9365 & 0.9385 & 0.6 \\
			DPC-KNN & \pmb{0.9975} & \pmb{0.9923} & \pmb{0.9956} & \pmb{0.9966} & 3.0 & 0.9710 & 0.9585 & 0.9415 & 0.9433 & 1.0 \\
			SNN-DPC & 0.9784 & 0.9548 & 0.9594 & 0.9681 & 15 & \pmb{0.9758} & \pmb{0.9642} & \pmb{0.9509} & \pmb{0.9525} & 41 \\
			DPC-TSA & \pmb{0.9975} & \pmb{0.9923} & \pmb{0.9956} & \pmb{0.9966} & 10 & 0.9706 & 0.9582 & 0.9409 & 0.9428 & 32 \\
			& Flame &  &  &  &  & Jain &  &  &  &  \\
			HC & 0.7333 & 0.2687 & 0.2127 & 0.6269 & - & 0.7855 & 0.3882 & 0.3243 & 0.7004 & - \\
			K-Means & 0.8375 & 0.3969 & 0.4534 & 0.7364 & 2 & 0.8820 & 0.5264 & 0.5767 & 0.8200 & 2 \\
			DBSCAN & 0.7792 & 0.8894 & 0.9495 & 0.9764 & 0.14/34 & 0.9920 & 0.9292 & 0.9661 & 0.9871 & 0.1/20 \\
			OPTICS & 0.9583 & 0.7763 & 0.8382 & 0.9272 & 0.01/26 & 0.9893 & 0.9124 & 0.9553 & 0.9826 & 0.8/34 \\
			SC & 0.8500 & 0.4403 & 0.4880 & 0.7530 & 1.0 & 0.9142 & 0.5525 & 0.6747 & 0.8680 & 4.0 \\
			DPC & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & 2.8  & 0.9249 & 0.6514 & 0.7146 & 0.8819 & 0.9 \\
			DPC-KNN & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & 2.0 & 0.9249 & 0.6514 & 0.7146 & 0.8819 & 6.0 \\ 
			SNN-DPC & 0.9875 & 0.8975 & 0. 502 & 0.9768 & 5 & 0.8874 & 0.5581 & 0.5935 & 0.8272 & 39 \\
			DPC-TSA & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & 21 & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & \pmb{1.0000} & 37/19 \\
			& S2 &  & & & & R15 &  &  &  &  \\
			HC & 0.9526 & 0.9265 & 0.9039 & 0.9103 & - & 0.9917 & 0.9854 & 0.9820 & 0.9832 & - \\
			K-Means & \pmb{0.9700} & \pmb{0.9461} & \pmb{0.9379} & \pmb{0.9420} & 15 & \pmb{0.9967} & \pmb{0.9938} & \pmb{0.9928} & \pmb{0.9932} & 15 \\
			DBSCAN & 0.8376 & 0.8752 & 0.7593 & 0.7765 & 0.04/50 & 0.9933 & 0.9895 & 0.9857 & 0.9867 & 0.05/29 \\
			OPTICS & 0.2524 & 0.6649 & 0.2180 & 0.4024 & 0.01/28 & 0.9783 & 0.9671 & 0.9536 & 0.9567 & 0.01/33 \\
			SC & 0.9114 & 0.8790 & 0.8193 & 0.8315 & 2.5 & 0.8583 & 0.9385 & 0.8509 & 0.8666 & 4.0 \\
			DPC & 0.9686 & 0.9437 & 0.9352 & 0.9395 & 1.5 & \pmb{0.9967} & \pmb{0.9938} & \pmb{0.9928} & \pmb{0.9932} & 0.6 \\
			DPC-KNN & 0.9694 & 0.9449 & 0.9367 & 0.9409 & 0.2 & \pmb{0.9967} & \pmb{0.9938} & \pmb{0.9928} & \pmb{0.9932} & 3.0 \\
			SNN-DPC & 0.9644 & 0.9386 & 0.9264 & 0.9313 & 35 & \pmb{0.9967} & \pmb{0.9938} & \pmb{0.9928} & \pmb{0.9932} & 27 \\
			DPC-TSA & 0.9690 & 0.9445 & 0.9359 & 0.9402 & 28 & \pmb{0.9967} & \pmb{0.9938} & \pmb{0.9928} & \pmb{0.9932} & 10 \\"""

if __name__ == "__main__":
    """"""
    # deal_other_uci()
    # file = "abalone"
    # dir_path = "./dataset/raw/uci/" + file + "/" + file + ".csv"
    # raw_data = pandas.read_csv("tmp.csv")
    # col_list = list(raw_data.columns)
    # label = {"label": normalized_label(list(raw_data[col_list[-1]]))}
    # data = noramlized(raw_data[col_list[0:-1]]).round(3).join(pandas.DataFrame(label))
    # data.columns = list(range(len(data.columns) - 1)) + ["label"]
    # print(data)
    c_latex = latex_code.split("\n")

    data = {
        # " COIL20 ": " 0.7042 & 0.8143 & 0.6552 & 0.6771 & -  0.6486 & 0.7802 & 0.6191 & 0.6402 & 20  - & -0.000 & 0.0000 & 0.2221 & 0.01/2  - & 0.5817 & 0.1159 & 0.3196 & 0.04/10  - & 0.0024 & 0.0001 & 0.2193 & 1.0  0.6986 & 0.8336 & 0.5932 & 0.6372 & 2.2  0.2882 & 0.5741 & 0.1914 & 0.3570 & 0.1  0.7028 & 0.8828 & 0.5794 & 0.6396 & 13  \\pmb{0.7542} & \\pmb{0.8542} & \\pmb{0.6751} & \\pmb{0.6935} & 34/31 ",
        # " Dermatology ": " 0.7650 & 0.8781 & 0.7310 & 0.7850 & - \\ 0.7596 & 0.8772 & 0.7271 & 0.7817 & 6 \\ 0.5656 & 0.5345 & 0.3271 & 0.5193 & 0.95/5 \\ 0.6202 & 0.6058 & 0.3682 & 0.5496 & 0.01/7 \\ 0.7623 & 0.8474 & 0.7110 & 0.7705 & 4.0 \\ 0.7514 & 0.7040 & 0.5850 & 0.6785 & 1.6 \\ 0.8798 & 0.8377 & 0.7836 & 0.8261 & 2.0 \\ 0.8607 & 0.9280 & 0.8689 & 0.9021 & 19 \\ \\pmb{0.9590} & \\pmb{0.9370} & \\pmb{0.9310} & \\pmb{0.9448} & 19/41 \\",
        # " Iris ": " 0.8867 & 0.7810 & 0.7196 & 0.8159 & -  0.8867 & 0.7387 & 0.7163 & 0.8112 & 3  0.8600 & 0.6590 & 0.6246 & 0.7522 & 0.13/9  0.7733 & 0.7067 & 0.5789 & 0.7431 & 0.01/13  0.8933 & 0.7880 & 0.7323 & 0.8238 & 3.0  0.5533 & 0.6483 & 0.4531 & 0.6856 & 0.2  0.9667 & 0.8836 & 0.9038 & 0.9355 & 0.8  \\pmb{0.9733} & \\pmb{0.9133} & \\pmb{0.9222} & \\pmb{0.9479} & 15  0.9667 & 0.8836 & 0.9038 & 0.9355 & 14/1 ",
        # " Isolet ": " 0.6237 & 0.7602 & 0.5602 & 0.5806 & - \\ 0.5955 & 0.7521 & 0.5255 & 0.5541 & 26 \\ - & 0.0000 & 0.0000 & 0.1945 & 0.01/10 \\ - & 0.1770 & 0.0083 & 0.1025 & 0.01/2 \\ 0.1878 & 0.0000 & 0.0041 & 0.1861 & 5.0 \\ 0.3468 & 0.6086 & 0.2842 & 0.3790 & 3.9 \\ 0.4301 & 0.6388 & 0.3601 & 0.4223 & 0.2 \\ 0.5397 & 0.7664 & 0.4695 & 0.5197 & 8 \\ \\pmb{0.6417} & \\pmb{0.7700} & \\pmb{0.5713} & \\pmb{0.5955} & 24/61 \\",
        # " Jaffe ": " 0.9014 & 0.9002 & 0.8124 & 0.8320 & -  0.9108 & 0.9167 & 0.8375 & 0.8542 & 10  - & 0.0000 & 0.0000 & 0.3097 & 0.01/7  0.7840 & 0.8491 & 0.6803 & 0.7232 & 0.05/9  0.1878 & 0.0407 & 0.0042 & 0.1861 & 5.0  0.7653 & 0.9004 & 0.7604 & 0.7978 & 2.8  0.5211 & 0.6704 & 0.4197 & 0.5305 & 2.0  0.9531 & 0.9401 & 0.9033 & 0.9127 & 10  \\pmb{0.9671} & \\pmb{0.9601} & \\pmb{0.9331} & \\pmb{0.9396} & 29/41 ",
        # " Lung ": " 0.8768 & 0.6913 & 0.6725 & 0.8235 & - \\ 0.7438 & 0.6009 & 0.4347 & 0.6613 & 5 \\ - & 0.0000 & 0.0000 & 0.7033 & 0.01/2 \\ 0.7537 & 0.3465 & 0.3411 & 0.7673 & 0.01/3 \\ 0.6897 & 0.0277 & 0.0388 & 0.7054 & 4.0 \\ 0.5616 & 0.2620 & 0.1098 & 0.5066 & 3.1 \\ 0.6995 & 0.2259 & 0.2121 & 0.7278 & 6.0 \\ 0.8424 & 0.6657 & 0.6347 & 0.8511 & 14 \\ \\pmb{0.9015} & \\pmb{0.7250} & \\pmb{0.7201} & \\pmb{0.8706} & 8/9 \\",
        # " Parkinsons ": " 0.5333 & 0.1283 & 0.000 & 0.6097 & -  0.6308 & 0.2318 & 0.0520 & 0.5957 & 2  0.7846 & 0.1207 & 0.1250 & 0.7993 & 0.23/5  0.8154 & 0.2296 & 0.2482 & 0.8115 & 0.01/10  0.7436 & -0.001 & -0.013 & 0.7805 & 3.0  \\pmb{0.8205} & \\pmb{0.2467} & \\pmb{0.2686} & \\pmb{0.8140} & 0.5  \\pmb{0.8205} & \\pmb{0.2467} & \\pmb{0.2686} & \\pmb{0.8140} & 2.0  0.8103 & 0.1710 & 0.2449 & 0.8015 & 6  \\pmb{0.8205} & \\pmb{0.2467} & \\pmb{0.2686} & \\pmb{0.8140} & 9/70 ",
        # " Seeds ": " 0.8714 & 0.6872 & 0.6752 & 0.7852 & - \\ 0.8905 & 0.6714 & 0.7049 & 0.8026 & 3 \\ 0.8381 & 0.5749 & 0.5843 & 0.7268 & 0.34/43 \\ 0.6762 & 0.4276 & 0.2796 & 0.5755 & 0.01/23 \\ 0.8857 & 0.6859 & 0.6892 & 0.7928 & 4.5 \\ 0.9143 & 0.7319 & 0.7664 & 0.8439 & 0.7 \\ 0.9048 & 0.7169 & 0.7448 & 0.8297 & 1.0 \\ \\pmb{0.9190} & \\pmb{0.7400} & \\pmb{0.7776} & \\pmb{0.8513} & 6 \\ 0.9143 & 0.7319 & 0.7664 & 0.8439 & 4 \\",
    }
    idx = 0
    pre = -1
    tmp1 = ""
    tmp2 = ""

    for line in c_latex:
        line_content = line.split("&")
        """10 为周期"""
        if idx // 10 != pre:
            """标题"""
            if len(line_content) > 7:
                tmp2 = line_content[6].strip()
                data[tmp2] = []

            tmp1 = line_content[1].strip()
            data[tmp1] = []

        else:
            """正文"""
            if len(line_content) > 7:
                data[tmp2].append("&".join(line_content[6:-1]) + "\n")
            data[tmp1].append("&".join(line_content[:5]) + "\n")
        pre = idx // 10
        idx += 1

    """['Dermatology', 'COIL20', 'Isolet', 'Iris', 'Lung', 'Jaffe', 'Seeds', 'Parkinsons', 'Sonar', 'Segment', 'WDBC', 'Tox-171', 'Wine']"""
    c3 = [
        "Dermatology",
        "Isolet",
        "Lung",
        "Seeds",
        "Sonar",
        "Segment",
        "WDBC",
        "Tox-171",
    ]
    idx = 0
    cont = ""
    for idx in range(4):
        """i*2,i*2+1"""
        # print("& " + c3[idx * 2] + "&  &  &  & " + c3[idx * 2 + 1] + " &  &  & \\")
        cont += (
            "& "
            + c3[idx * 2]
            + " &  &  &  & "
            + c3[idx * 2 + 1]
            + " &  &  & \\\\"
            + "\n"
        )
        for j in range(9):
            cont += (
                data[c3[idx * 2]][j].strip("\n").strip("\t")
                + "&"
                + data[c3[idx * 2 + 1]][j].strip("\n").strip("\t")
                + "\\\\"
                + "\n"
            )

    print(cont)
